buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        url "https://maven.tehnut.info"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    flatDir {
        dirs("libs")
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//apply plugin: 'eclipse'
//apply plugin: 'maven-publish'

version = '0.1.0'
group = 'maxhyper.dynamictreesquark' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'DynamicTreesQuark'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //This is for quark since it uses mixins
            properties 'mixin.env.disableRefMap' : 'true'

            mods {
                dynamictreesquark {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //This is for quark since it uses mixins
            properties 'mixin.env.disableRefMap' : 'true'

            mods {
                dynamictreesquark {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.7'

    // Compile against the Hwyla API, but do not include it at runtime
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.11-B78_1.16.2:api")
    // At runtime, use the full Hwyla jar
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.11-B78_1.16.2")

    // Compile JEI API, but don't include in runtime
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65:api")
    // At runtime, use JEI mod
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65")

    implementation fg.deobf("blank:DynamicTrees-1.16.5:0.1.0")
    implementation fg.deobf("blank:AutoRegLib-1.6:47")
    implementation fg.deobf("blank:Quark-r2.4:299")
}

// Example for how to get properties into the manifest for reading by the runtime..
//jar {
//    manifest {
//        attributes([
//            "Specification-Title": "examplemod",
//            "Specification-Vendor": "examplemodsareus",
//            "Specification-Version": "1", // We are version 1 of ourselves
//            "Implementation-Title": project.name,
//            "Implementation-Version": "${version}",
//            "Implementation-Vendor" :"examplemodsareus",
//            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}